pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'fer-project'
        DOCKER_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}"
        IS_MODEL_UPDATE = 'false'
    }
    
    stages {
        stage('Setup') {
            steps {
                script {
                    echo "🚀 Starting FER Project CI/CD Pipeline..."
                    echo "Build: ${env.BUILD_NUMBER}"
                    echo "Commit: ${env.GIT_COMMIT}"
                    echo "Branch: ${env.GIT_BRANCH}"
                    
                    // Check if this is a model update (triggered by model-v* tag)
                    if (env.GIT_TAG && env.GIT_TAG.startsWith('model-v')) {
                        env.IS_MODEL_UPDATE = 'true'
                        echo "🏷️ Model update detected: ${env.GIT_TAG}"
                    } else {
                        echo "📝 Code update detected"
                    }
                }
            }
        }
        
        stage('Code Quality') {
            when {
                expression { env.IS_MODEL_UPDATE == 'false' }
                changeset 'api/main.py'
            }
            steps {
                script {
                    echo "🔍 Running code quality checks..."
                    sh 'python3 -m flake8 api/ || echo "Flake8 not available, skipping..."'
                    sh 'python3 -m black --check api/ || echo "Black not available, skipping..."'
                }
            }
        }
        
        stage('Run Tests') {
            when {
                expression { env.IS_MODEL_UPDATE == 'false' }
                changeset 'api/main.py'
            }
            steps {
                script {
                    echo "🧪 Running tests..."
                    sh 'SKIP_MODEL_LOAD_FOR_TEST=1 python3 -m pytest tests/ -v || echo "Tests failed but continuing..."'
                }
            }
        }
        
        stage('Build Docker Image') {
            when {
                expression { env.IS_MODEL_UPDATE == 'false' }
                changeset 'api/main.py'
            }
            steps {
                script {
                    echo "🐳 Building Docker image..."
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                    sh "docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest"
                    echo "✅ Docker image built: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                }
            }
        }
        
        stage('Validate Metadata') {
            when {
                expression { env.IS_MODEL_UPDATE == 'false' }
                changeset 'api/main.py'
            }
            steps {
                script {
                    echo "📋 Validating model metadata..."
                    
                    // Check if model_metadata.json exists
                    if (fileExists('model/model_metadata.json')) {
                        echo "✅ model_metadata.json exists"
                        sh 'cat model/model_metadata.json'
                    } else {
                        echo "⚠️ model_metadata.json not found, auto-generating..."
                        
                        // Auto-generate metadata
                        sh '''
                            mkdir -p model
                            cat > model/model_metadata.json << 'EOF'
{
    "model_name": "fer-model",
    "model_path": "model/best_model_now.pth",
    "dataset": "FER2013",
    "version": "build-${BUILD_NUMBER}",
    "test_accuracy": null,
    "updated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
    "notes": "Auto-generated by CI/CD pipeline"
}
EOF
                        '''
                        sh 'cat model/model_metadata.json'
                    }
                }
            }
        }
        
        stage('Notify Host Deployment') {
            when {
                expression { env.IS_MODEL_UPDATE == 'false' }
                changeset 'api/main.py'
            }
            steps {
                script {
                    echo "📢 CI/CD Pipeline completed successfully!"
                    echo "🐳 Docker image: ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    echo "📋 Model metadata updated"
                    echo ""
                    echo "🚀 NEXT STEPS (run on host machine):"
                    echo "1. Deploy to test namespace:"
                    echo "   kubectl create namespace fer-project-test --dry-run=client -o yaml | kubectl apply -f -"
                    echo "   kubectl apply -f k8s/ -n fer-project-test"
                    echo "   kubectl set image deployment/fer-service fer-service=${DOCKER_IMAGE}:${DOCKER_TAG} -n fer-project-test"
                    echo ""
                    echo "2. Run health checks:"
                    echo "   kubectl port-forward -n fer-project-test svc/fer-service 8001:8000 &"
                    echo "   curl http://localhost:8001/health"
                    echo ""
                    echo "3. If tests pass, deploy to production:"
                    echo "   kubectl apply -f k8s/ -n fer-project"
                    echo "   kubectl set image deployment/fer-service fer-service=${DOCKER_IMAGE}:${DOCKER_TAG} -n fer-project"
                    echo ""
                    echo "4. Clean up test namespace:"
                    echo "   kubectl delete namespace fer-project-test"
                }
            }
        }
        
        stage('Model Update Notification') {
            when {
                expression { env.IS_MODEL_UPDATE == 'true' }
            }
            steps {
                script {
                    echo "🤖 Model update detected!"
                    echo "🏷️ Tag: ${env.GIT_TAG}"
                    echo ""
                    echo "🚀 NEXT STEPS (run on host machine):"
                    echo "1. Deploy model update to production:"
                    echo "   kubectl apply -f k8s/ -n fer-project"
                    echo "   kubectl rollout restart deployment/fer-service -n fer-project"
                    echo "   kubectl rollout status deployment/fer-service -n fer-project"
                }
            }
        }
    }
    
    post {
        always {
            echo "🏁 Pipeline completed!"
        }
        success {
            echo "✅ Pipeline succeeded!"
        }
        failure {
            echo "❌ Pipeline failed!"
        }
    }
}
